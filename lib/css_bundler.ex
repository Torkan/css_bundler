defmodule CssBundler do
  def pad_extensions(extensions) do
    for extension <- extensions do
      if String.starts_with?(extension, "."), do: extension, else: ".#{extension}"
    end
  end

  def bundle_css(extensions) do
    dirs = Application.get_env(:css_bundler, :dirs)
    output_file = Application.get_env(:css_bundler, :output_file)
    entrypoint_file = Application.get_env(:css_bundler, :entrypoint_file)
    silent = Application.get_env(:css_bundler, :silent, false)

    start = DateTime.utc_now()

    file_paths =
      for dir <- dirs, reduce: [] do
        found_files ->
          css_files =
            for ext <- extensions do
              Path.join(dir, "/**/*#{ext}") |> Path.wildcard()
            end
            |> List.flatten()

          found_files ++ css_files
      end
      |> Enum.sort()

    output_file_dir = Path.join([File.cwd!(), Path.dirname(output_file)])

    File.mkdir_p!(output_file_dir)

    diff = DateTime.diff(DateTime.utc_now(), start)

    imported_styles =
      for file <- [entrypoint_file | file_paths], reduce: [] do
        styles_list ->
          styles = "/* #{file |> String.trim(File.cwd!())} */\n\n" <> File.read!(file)
          [styles | styles_list]
      end
      |> Enum.reverse()

    output = """
    /* This file was generated by CSSBundler */

    #{Enum.join(imported_styles, "\n")}
    """

    File.write!(output_file, output)

    if not silent do
      IO.puts("Rebuilt #{output_file} in #{diff}ms.")
    end
  end
end
